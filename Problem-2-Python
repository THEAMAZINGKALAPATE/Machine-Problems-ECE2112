def findCirc(x1,y1,x2,y2,x3,y3):
    import numpy as np
    print("First point Coordinates: (",x1,",",y1,")")
    print("Second point Coordinates: (",x2,",",y2,")")
    print("Third point Coordinates: (",x3,",",y3,")")
    # x1**2 + y1**2 + D*x1 + E*y1 + F = 0
    # x2**2 + y2**2 + D*x2 + E*y2 + F = 0
    # x3**2 + y3**2 + D*x3 + E*y3 + F = 0, 3 eq 3 Unknown
    #eq1: D*x1 + E*y1 + F = -x1**2 - y1**2
    #eq2: D*x2 + E*y2 + F = -x2**2 - y2**2
    #eq3: D*x3 + E*y3 + F = -x3**2 - y3*2
    # D=x1 E=x2 F=x3
    a1 = -x1**2 - y1**2
    a2 = -x2**2 - y2**2
    a3 = -x3**2 - y3**2
    A = np.array([[x1,y1,1],[x2,y2,1],[x3,y3,1]])
    B = np.array([a1,a2,a3])
    DEF = np.linalg.solve(A,B)
    D = round(DEF[0])
    E = round(DEF[1])
    F = round(DEF[2])    
    print("D = ",D,"E = ",E," F = ",F)
    #Completing Squares
    # (x1**2 + Dx1 + h)+(y1**2 + Ey1 + k) = -F
    #(x1**2 + Dx1 + h)+(y1**2 + Ey1 + k) = -F
    h = (D/2)**2 
    k = (E/2)**2
    print("Center: (",h,",",k,")")
    r = (x1-h)**2 +  (y1-k)**2
    print("Radius: ",r)
